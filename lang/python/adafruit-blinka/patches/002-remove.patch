From 9b7ecf7bf3591416d59f20edf6a6b4db74a0991e Mon Sep 17 00:00:00 2001
From: esaaprillia <esaapriliasalsabila@gmail.com>
Date: Mon, 1 Sep 2025 12:49:38 +0800
Subject: [PATCH] Delete
 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common directory

---
 .../amlogic/meson_g12_common/__init__.py      |   0
 .../amlogic/meson_g12_common/pin.py           | 191 ------------------
 .../meson_g12_common/pulseio/PulseIn.py       | 185 -----------------
 .../meson_g12_common/pulseio/__init__.py      |   0
 .../meson_g12_common/pulseio/libgpiod_pulsein | Bin 25216 -> 0 bytes
 .../pulseio/libgpiod_pulsein.license          |   3 -
 6 files changed, 379 deletions(-)
 delete mode 100644 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/__init__.py
 delete mode 100644 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pin.py
 delete mode 100644 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/PulseIn.py
 delete mode 100644 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/__init__.py
 delete mode 100755 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein
 delete mode 100644 src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein.license

diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/__init__.py b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pin.py b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pin.py
deleted file mode 100644
index ea01a8eb..00000000
--- a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pin.py
+++ /dev/null
@@ -1,191 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-# SPDX-FileCopyrightText: 2023 Steve Jeong for Hardkernel
-#
-# SPDX-License-Identifier: MIT
-"""
-G12A, G12B, and SM1 Common Definitions
-Ref:
-Linux kernel 4.9.y (hardkernel)
-    linux/include/dt-bindings/gpio/meson-g12a-gpio.h
-Linux kernel 5.4.y (mainline)
-    linux/include/dt-bindings/gpio/meson-g12a-gpio.h
-    linux/arch/arm64/boot/dts/amlogic/meson-g12-common.dtsi
-"""
-
-from adafruit_blinka.agnostic import detector
-from adafruit_blinka.microcontroller.alias import get_dts_alias, get_pwm_chipid
-from adafruit_blinka.microcontroller.generic_linux.libgpiod_pin import Pin
-from adafruit_blinka.microcontroller.generic_linux.libgpiod_chip import Chip
-
-chip0 = Chip("0")
-chip1 = Chip("1")
-
-chip0lines = chip0.num_lines
-chip1lines = chip1.num_lines
-
-if chip0lines < 20:
-    aobus = 0
-    periphs = 1
-    periphs_offset = chip1lines - 85
-else:
-    aobus = 1
-    periphs = 0
-    periphs_offset = chip0lines - 85
-
-del chip0
-del chip1
-
-GPIOAO_0 = GPIO496 = Pin((aobus, 0))
-GPIOAO_1 = GPIO497 = Pin((aobus, 1))
-GPIOAO_2 = GPIO498 = Pin((aobus, 2))
-GPIOAO_3 = GPIO499 = Pin((aobus, 3))
-GPIOAO_4 = GPIO500 = Pin((aobus, 4))
-GPIOAO_5 = GPIO501 = Pin((aobus, 5))
-GPIOAO_6 = GPIO502 = Pin((aobus, 6))
-GPIOAO_7 = GPIO503 = Pin((aobus, 7))
-GPIOAO_8 = GPIO504 = Pin((aobus, 8))
-GPIOAO_9 = GPIO505 = Pin((aobus, 9))
-GPIOAO_10 = GPIO506 = Pin((aobus, 10))
-GPIOAO_11 = GPIO507 = Pin((aobus, 11))
-GPIOE_0 = GPIO508 = Pin((aobus, 12))
-GPIOE_1 = GPIO509 = Pin((aobus, 13))
-GPIOE_2 = GPIO510 = Pin((aobus, 14))
-GPIO_TEST_N = GPIO511 = Pin((aobus, 15))
-
-GPIOH_0 = GPIO427 = Pin((periphs, 16 + periphs_offset))
-GPIOH_1 = GPIO428 = Pin((periphs, 17 + periphs_offset))
-GPIOH_2 = GPIO429 = Pin((periphs, 18 + periphs_offset))
-GPIOH_3 = GPIO430 = Pin((periphs, 19 + periphs_offset))
-GPIOH_4 = GPIO431 = Pin((periphs, 20 + periphs_offset))
-GPIOH_5 = GPIO432 = Pin((periphs, 21 + periphs_offset))
-GPIOH_6 = GPIO433 = Pin((periphs, 22 + periphs_offset))
-GPIOH_7 = GPIO434 = Pin((periphs, 23 + periphs_offset))
-GPIOH_8 = GPIO435 = Pin((periphs, 24 + periphs_offset))
-
-GPIOA_0 = GPIO460 = Pin((periphs, 49 + periphs_offset))
-GPIOA_1 = GPIO461 = Pin((periphs, 50 + periphs_offset))
-GPIOA_2 = GPIO462 = Pin((periphs, 51 + periphs_offset))
-GPIOA_3 = GPIO463 = Pin((periphs, 52 + periphs_offset))
-GPIOA_4 = GPIO464 = Pin((periphs, 53 + periphs_offset))
-GPIOA_5 = GPIO465 = Pin((periphs, 54 + periphs_offset))
-GPIOA_6 = GPIO466 = Pin((periphs, 55 + periphs_offset))
-GPIOA_7 = GPIO467 = Pin((periphs, 56 + periphs_offset))
-GPIOA_8 = GPIO468 = Pin((periphs, 57 + periphs_offset))
-GPIOA_9 = GPIO469 = Pin((periphs, 58 + periphs_offset))
-GPIOA_10 = GPIO470 = Pin((periphs, 59 + periphs_offset))
-GPIOA_11 = GPIO471 = Pin((periphs, 60 + periphs_offset))
-GPIOA_12 = GPIO472 = Pin((periphs, 61 + periphs_offset))
-GPIOA_13 = GPIO473 = Pin((periphs, 62 + periphs_offset))
-GPIOA_14 = GPIO474 = Pin((periphs, 63 + periphs_offset))
-GPIOA_15 = GPIO475 = Pin((periphs, 64 + periphs_offset))
-
-GPIOX_0 = GPIO476 = Pin((periphs, 65 + periphs_offset))
-GPIOX_1 = GPIO477 = Pin((periphs, 66 + periphs_offset))
-GPIOX_2 = GPIO478 = Pin((periphs, 67 + periphs_offset))
-GPIOX_3 = GPIO479 = Pin((periphs, 68 + periphs_offset))
-GPIOX_4 = GPIO480 = Pin((periphs, 69 + periphs_offset))
-GPIOX_5 = GPIO481 = Pin((periphs, 70 + periphs_offset))
-GPIOX_6 = GPIO482 = Pin((periphs, 71 + periphs_offset))
-GPIOX_7 = GPIO483 = Pin((periphs, 72 + periphs_offset))
-GPIOX_8 = GPIO484 = Pin((periphs, 73 + periphs_offset))
-GPIOX_9 = GPIO485 = Pin((periphs, 74 + periphs_offset))
-GPIOX_10 = GPIO486 = Pin((periphs, 75 + periphs_offset))
-GPIOX_11 = GPIO487 = Pin((periphs, 76 + periphs_offset))
-GPIOX_12 = GPIO488 = Pin((periphs, 77 + periphs_offset))
-GPIOX_13 = GPIO489 = Pin((periphs, 78 + periphs_offset))
-GPIOX_14 = GPIO490 = Pin((periphs, 79 + periphs_offset))
-GPIOX_15 = GPIO491 = Pin((periphs, 80 + periphs_offset))
-GPIOX_16 = GPIO492 = Pin((periphs, 81 + periphs_offset))
-GPIOX_17 = GPIO493 = Pin((periphs, 82 + periphs_offset))
-GPIOX_18 = GPIO494 = Pin((periphs, 83 + periphs_offset))
-GPIOX_19 = GPIO495 = Pin((periphs, 84 + periphs_offset))
-
-SPI0_SCLK = GPIOX_11
-SPI0_MISO = GPIOX_9
-SPI0_MOSI = GPIOX_8
-SPI0_CS0 = GPIOX_10
-
-UART1_TX = GPIOX_12
-UART1_RX = GPIOX_13
-
-# ordered as i2cId, sclId, sdaId
-i2cPorts = []
-
-# ordered as spiId, sckId, mosiId, misoId
-spiPorts = ((0, SPI0_SCLK, SPI0_MOSI, SPI0_MISO),)
-
-# SysFs pwm outputs, pwm channel and pin in first tuple
-pwmOuts = []
-
-# ordered as uartId, txId, rxId
-uartPorts = [
-    (1, UART1_TX, UART1_RX),
-]
-
-# SysFS analog inputs, Ordered as analog analogInId, device, and channel
-analogIns = []
-
-board = detector.board.id
-if board in ("ODROID_C4", "ODROID_N2"):
-    alias = get_dts_alias("ffd1d000.i2c")
-    if alias is not None:
-        globals()[alias + "_SCL"] = GPIOX_18
-        globals()[alias + "_SDA"] = GPIOX_17
-        i2cPorts.append((int(alias[-1]), GPIOX_18, GPIOX_17))
-    alias = get_dts_alias("ffd1c000.i2c")
-    if alias is not None:
-        globals()[alias + "_SCL"] = GPIOA_15
-        globals()[alias + "_SDA"] = GPIOA_14
-        i2cPorts.append((int(alias[-1]), GPIOA_15, GPIOA_14))
-    alias = get_dts_alias("ffd24000.serial")
-    if alias is not None:
-        globals()[alias + "_TX"] = GPIOX_12
-        globals()[alias + "_RX"] = GPIOX_13
-        uartPorts.append((int(alias[-1]), GPIOX_12, GPIOX_13))
-    alias = get_dts_alias("ffd23000.serial")
-    if alias is not None:
-        globals()[alias + "_TX"] = GPIOX_6
-        globals()[alias + "_RX"] = GPIOX_7
-        uartPorts.append((int(alias[-1]), GPIOX_6, GPIOX_7))
-
-if board in ("ODROID_C4"):
-    alias = get_pwm_chipid("ffd1b000.pwm")
-    if alias is not None:
-        globals()["PWMA"] = GPIOX_6
-        globals()["PWMB"] = GPIOX_19
-        pwmOuts.append(((int(alias[-1]), 0), GPIOX_6))
-        pwmOuts.append(((int(alias[-1]), 1), GPIOX_19))
-    alias = get_pwm_chipid("ffd1a000.pwm")
-    if alias is not None:
-        globals()["PWMC"] = GPIOX_5
-        globals()["PWMD"] = GPIOX_3
-        pwmOuts.append(((int(alias[-1]), 0), GPIOX_5))
-        pwmOuts.append(((int(alias[-1]), 1), GPIOX_3))
-    alias = get_pwm_chipid("ffd19000.pwm")
-    if alias is not None:
-        globals()["PWME"] = GPIOX_16
-        globals()["PWMF"] = GPIOX_7
-        pwmOuts.append(((int(alias[-1]), 0), GPIOX_16))
-        pwmOuts.append(((int(alias[-1]), 1), GPIOX_7))
-    analogIns.append((37, 0, 2))
-    analogIns.append((40, 0, 0))
-if board in ("ODROID_N2"):
-    alias = get_pwm_chipid("ffd1a000.pwm")
-    if alias is not None:
-        globals()["PWMC"] = GPIOX_5
-        globals()["PWMD"] = GPIOX_6
-        pwmOuts.append(((int(alias[-1]), 0), GPIOX_5))
-        pwmOuts.append(((int(alias[-1]), 1), GPIOX_6))
-    alias = get_pwm_chipid("ffd19000.pwm")
-    if alias is not None:
-        globals()["PWME"] = GPIOX_16
-        globals()["PWMF"] = GPIOX_7
-        pwmOuts.append(((int(alias[-1]), 0), GPIOX_16))
-        pwmOuts.append(((int(alias[-1]), 1), GPIOX_7))
-    analogIns.append((37, 0, 3))
-    analogIns.append((40, 0, 2))
-
-analogIns = tuple(analogIns)
-i2cPorts = tuple(i2cPorts)
-pwmOuts = tuple(pwmOuts)
-uartPorts = tuple(uartPorts)
diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/PulseIn.py b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/PulseIn.py
deleted file mode 100644
index 73397add..00000000
--- a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/PulseIn.py
+++ /dev/null
@@ -1,185 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
-"""Custom PulseIn Class to read PWM signals"""
-import time
-import subprocess
-import os
-import atexit
-import random
-import sysv_ipc
-
-DEBUG = False
-queues = []
-procs = []
-
-
-# The message queues live outside of python space, and must be formally cleaned!
-def final():
-    """In case the program is cancelled or quit, we need to clean up the PulseIn
-    helper process and also the message queue, this is called at exit to do so"""
-    if DEBUG:
-        print("Cleaning up message queues", queues)
-        print("Cleaning up processes", procs)
-    for q in queues:
-        q.remove()
-    for proc in procs:
-        proc.terminate()
-
-
-atexit.register(final)
-
-
-# pylint: disable=c-extension-no-member
-class PulseIn:
-    """PulseIn Class to read PWM signals"""
-
-    def __init__(self, pin, maxlen=2, idle_state=False):
-        """Create a PulseIn object associated with the given pin.
-        The object acts as a read-only sequence of pulse lengths with
-        a given max length. When it is active, new pulse lengths are
-        added to the end of the list. When there is no more room
-        (len() == maxlen) the oldest pulse length is removed to make room."""
-
-        if isinstance(pin.id, tuple):
-            self._pin = str(pin.id[1])
-            self._chip = "gpiochip{}".format(pin.id[0])
-        else:
-            self._pin = str(pin.id)
-            self._chip = "gpiochip0"
-
-        self._maxlen = maxlen
-        self._idle_state = idle_state
-        self._queue_key = random.randint(1, 9999)
-        try:
-            self._mq = sysv_ipc.MessageQueue(None, flags=sysv_ipc.IPC_CREX)
-            if DEBUG:
-                print("Message Queue Key: ", self._mq.key)
-            queues.append(self._mq)
-        except sysv_ipc.ExistentialError:
-            raise RuntimeError(
-                "Message queue creation failed"
-            ) from sysv_ipc.ExistentialError
-
-        # Check if OS is 64-bit
-        libgpiod_filename = "libgpiod_pulsein"
-        dir_path = os.path.dirname(os.path.realpath(__file__))
-        cmd = [
-            dir_path + "/" + libgpiod_filename,
-            "--pulses",
-            str(maxlen),
-            "--queue",
-            str(self._mq.key),
-        ]
-        if idle_state:
-            cmd.append("-i")
-        cmd.append(self._chip)
-        cmd.append(self._pin)
-        if DEBUG:
-            print(cmd)
-
-        self._process = subprocess.Popen(cmd)  # pylint: disable=consider-using-with
-        procs.append(self._process)
-
-        # wait for it to start up
-        if DEBUG:
-            print("Waiting for startup success message from subprocess")
-        message = self._wait_receive_msg(timeout=0.25)
-        if message[0] != b"!":
-            raise RuntimeError("Could not establish message queue with subprocess")
-        self._paused = False
-
-    # pylint: disable=redefined-builtin
-    def _wait_receive_msg(self, timeout=0, type=2):
-        """Internal helper that will wait for new messages of a given type,
-        and throw an exception on timeout"""
-        if timeout > 0:
-            stamp = time.monotonic()
-            while (time.monotonic() - stamp) < timeout:
-                try:
-                    message = self._mq.receive(block=False, type=type)
-                    return message
-                except sysv_ipc.BusyError:
-                    time.sleep(0.001)  # wait a bit then retry!
-            # uh-oh timed out
-            raise RuntimeError(
-                "Timed out waiting for PulseIn message. Make sure libgpiod is installed."
-            )
-        message = self._mq.receive(block=True, type=type)
-        return message
-
-    # pylint: enable=redefined-builtin
-
-    def deinit(self):
-        """Deinitialises the PulseIn and releases any hardware and software
-        resources for reuse."""
-        # Clean up after ourselves
-        self._process.terminate()
-        procs.remove(self._process)
-        self._mq.remove()
-        queues.remove(self._mq)
-
-    def __enter__(self):
-        """No-op used by Context Managers."""
-        return self
-
-    def __exit__(self, exc_type, exc_value, tb):
-        """Automatically deinitializes the hardware when exiting a context."""
-        self.deinit()
-
-    def resume(self, trigger_duration=0):
-        """Resumes pulse capture after an optional trigger pulse."""
-        if trigger_duration != 0:
-            self._mq.send("t%d" % trigger_duration, True, type=1)
-        else:
-            self._mq.send("r", True, type=1)
-        self._paused = False
-
-    def pause(self):
-        """Pause pulse capture"""
-        self._mq.send("p", True, type=1)
-        self._paused = True
-
-    @property
-    def paused(self):
-        """True when pulse capture is paused as a result of pause() or
-        an error during capture such as a signal that is too fast."""
-        return self._paused
-
-    @property
-    def maxlen(self):
-        """The maximum length of the PulseIn. When len() is equal to maxlen,
-        it is unclear which pulses are active and which are idle."""
-        return self._maxlen
-
-    def clear(self):
-        """Clears all captured pulses"""
-        self._mq.send("c", True, type=1)
-
-    def popleft(self):
-        """Removes and returns the oldest read pulse."""
-        self._mq.send("^", True, type=1)
-        message = self._wait_receive_msg()
-        reply = int(message[0].decode("utf-8"))
-        # print(reply)
-        if reply == -1:
-            raise IndexError("pop from empty list")
-        return reply
-
-    def __len__(self):
-        """Returns the current pulse length"""
-        self._mq.send("l", True, type=1)
-        message = self._wait_receive_msg()
-        return int(message[0].decode("utf-8"))
-
-    # pylint: disable=redefined-builtin
-    def __getitem__(self, index, type=None):
-        """Returns the value at the given index or values in slice."""
-        self._mq.send("i%d" % index, True, type=1)
-        message = self._wait_receive_msg()
-        ret = int(message[0].decode("utf-8"))
-        if ret == -1:
-            raise IndexError("list index out of range")
-        return ret
-
-    # pylint: enable=redefined-builtin
diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/__init__.py b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein
deleted file mode 100755
index 51bcb9acf7e4f7ea226d7d9bcd10b4562b827bae..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 25216
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
L!;%UlvFv{XJlg_X

diff --git a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein.license b/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein.license
deleted file mode 100644
index 31653723..00000000
--- a/src/adafruit_blinka/microcontroller/amlogic/meson_g12_common/pulseio/libgpiod_pulsein.license
+++ /dev/null
@@ -1,3 +0,0 @@
-# SPDX-FileCopyrightText: 2023 Jan Volckaert for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
