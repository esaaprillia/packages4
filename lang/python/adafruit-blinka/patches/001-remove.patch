From d20a448661385080ef910c651a17081ba7ba7949 Mon Sep 17 00:00:00 2001
From: esaaprillia <esaapriliasalsabila@gmail.com>
Date: Mon, 1 Sep 2025 12:48:22 +0800
Subject: [PATCH] Delete src/adafruit_blinka/microcontroller/bcm283x directory

---
 .../microcontroller/bcm283x/__init__.py       |   0
 .../microcontroller/bcm283x/neopixel.py       | 139 -------------
 .../microcontroller/bcm283x/pin.py            |  96 ---------
 .../bcm283x/pulseio/PulseIn.py                | 187 -----------------
 .../bcm283x/pulseio/__init__.py               |   0
 .../bcm283x/pulseio/libgpiod_pulsein          | Bin 20448 -> 0 bytes
 .../bcm283x/pulseio/libgpiod_pulsein.license  |   3 -
 .../bcm283x/pulseio/libgpiod_pulsein64        | Bin 25832 -> 0 bytes
 .../pulseio/libgpiod_pulsein64.license        |   3 -
 .../microcontroller/bcm283x/rotaryio.py       | 192 ------------------
 10 files changed, 620 deletions(-)
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/__init__.py
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/neopixel.py
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/pin.py
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/pulseio/PulseIn.py
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/pulseio/__init__.py
 delete mode 100755 src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein.license
 delete mode 100755 src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64.license
 delete mode 100644 src/adafruit_blinka/microcontroller/bcm283x/rotaryio.py

diff --git a/src/adafruit_blinka/microcontroller/bcm283x/__init__.py b/src/adafruit_blinka/microcontroller/bcm283x/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/neopixel.py b/src/adafruit_blinka/microcontroller/bcm283x/neopixel.py
deleted file mode 100644
index 069c0c54..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/neopixel.py
+++ /dev/null
@@ -1,139 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
-"""BCM283x NeoPixel Driver Class"""
-import time
-import atexit
-import _rpi_ws281x as ws
-
-try:
-    # Used only for typing
-    from typing import Optional
-    from digitalio import DigitalInOut
-except ImportError:
-    pass
-
-# LED configuration.
-# pylint: disable=redefined-outer-name,too-many-branches,too-many-statements
-# pylint: disable=global-statement,protected-access
-LED_FREQ_HZ = 800000  # Frequency of the LED signal.  We only support 800KHz
-LED_DMA_NUM = 10  # DMA channel to use, can be 0-14.
-LED_BRIGHTNESS = 255  # We manage the brightness in the neopixel library
-LED_INVERT = 0  # We don't support inverted logic
-LED_STRIP = None  # We manage the color order within the neopixel library
-
-# a 'static' object that we will use to manage our PWM DMA channel
-# we only support one LED strip per raspi
-_led_strip = None
-_buf: Optional[bytearray] = None
-
-
-def neopixel_write(gpio: DigitalInOut, buf: bytearray) -> None:
-    """NeoPixel Writing Function"""
-    global _led_strip  # we'll have one strip we init if its not at first
-    global _buf  # we save a reference to the buf, and if it changes we will cleanup and re-init.
-
-    if _led_strip is None or buf is not _buf:
-        # This is safe to call since it doesn't do anything if _led_strip is None
-        neopixel_cleanup()
-
-        # Create a ws2811_t structure from the LED configuration.
-        # Note that this structure will be created on the heap so you
-        # need to be careful that you delete its memory by calling
-        # delete_ws2811_t when it's not needed.
-        _led_strip = ws.new_ws2811_t()
-        _buf = buf
-
-        # Initialize all channels to off
-        for channum in range(2):
-            channel = ws.ws2811_channel_get(_led_strip, channum)
-            ws.ws2811_channel_t_count_set(channel, 0)
-            ws.ws2811_channel_t_gpionum_set(channel, 0)
-            ws.ws2811_channel_t_invert_set(channel, 0)
-            ws.ws2811_channel_t_brightness_set(channel, 0)
-
-        channel = ws.ws2811_channel_get(_led_strip, _neopixel_detect_channel(gpio))
-
-        # Initialize the channel in use
-        count = 0
-        if len(buf) % 3 == 0:
-            # most common, divisible by 3 is likely RGB
-            LED_STRIP = ws.WS2811_STRIP_RGB
-            count = len(buf) // 3
-        elif len(buf) % 4 == 0:
-            LED_STRIP = ws.SK6812_STRIP_RGBW
-            count = len(buf) // 4
-        else:
-            raise RuntimeError("We only support 3 or 4 bytes-per-pixel")
-
-        ws.ws2811_channel_t_count_set(
-            channel, count
-        )  # we manage 4 vs 3 bytes in the library
-        ws.ws2811_channel_t_gpionum_set(channel, gpio._pin.id)
-        ws.ws2811_channel_t_invert_set(channel, LED_INVERT)
-        ws.ws2811_channel_t_brightness_set(channel, LED_BRIGHTNESS)
-        ws.ws2811_channel_t_strip_type_set(channel, LED_STRIP)
-
-        # Initialize the controller
-        ws.ws2811_t_freq_set(_led_strip, LED_FREQ_HZ)
-        ws.ws2811_t_dmanum_set(_led_strip, LED_DMA_NUM)
-
-        resp = ws.ws2811_init(_led_strip)
-        if resp != ws.WS2811_SUCCESS:
-            if resp == -5:
-                raise RuntimeError(
-                    "NeoPixel support requires running with sudo, please try again!"
-                )
-            message = ws.ws2811_get_return_t_str(resp)
-            raise RuntimeError(
-                "ws2811_init failed with code {0} ({1})".format(resp, message)
-            )
-        atexit.register(neopixel_cleanup)
-
-    channel = ws.ws2811_channel_get(_led_strip, _neopixel_detect_channel(gpio))
-    if gpio._pin.id != ws.ws2811_channel_t_gpionum_get(channel):
-        raise RuntimeError("Raspberry Pi neopixel support is for one strip only!")
-
-    if ws.ws2811_channel_t_strip_type_get(channel) == ws.WS2811_STRIP_RGB:
-        bpp = 3
-    else:
-        bpp = 4
-    # assign all colors!
-    for i in range(len(buf) // bpp):
-        r = buf[bpp * i]
-        g = buf[bpp * i + 1]
-        b = buf[bpp * i + 2]
-        if bpp == 3:
-            pixel = (r << 16) | (g << 8) | b
-        else:
-            w = buf[bpp * i + 3]
-            pixel = (w << 24) | (r << 16) | (g << 8) | b
-        ws.ws2811_led_set(channel, i, pixel)
-
-    resp = ws.ws2811_render(_led_strip)
-    if resp != ws.WS2811_SUCCESS:
-        message = ws.ws2811_get_return_t_str(resp)
-        raise RuntimeError(
-            "ws2811_render failed with code {0} ({1})".format(resp, message)
-        )
-    time.sleep(0.001 * ((len(buf) // 100) + 1))  # about 1ms per 100 bytes
-
-
-def neopixel_cleanup():
-    """Cleanup when we're done"""
-    global _led_strip
-
-    if _led_strip is not None:
-        # Ensure ws2811_fini is called before the program quits.
-        ws.ws2811_fini(_led_strip)
-        # Example of calling delete function to clean up structure memory.  Isn't
-        # strictly necessary at the end of the program execution here, but is good practice.
-        ws.delete_ws2811_t(_led_strip)
-        _led_strip = None
-
-
-def _neopixel_detect_channel(gpio: DigitalInOut) -> int:
-    """Detect the channel for a given GPIO, added for support PWM1 pins"""
-    if gpio._pin.id in (13, 19, 41, 45):
-        return 1
-    return 0
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pin.py b/src/adafruit_blinka/microcontroller/bcm283x/pin.py
deleted file mode 100644
index d741ada1..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/pin.py
+++ /dev/null
@@ -1,96 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
-"""Broadcom BCM283x pin names"""
-
-# Use RPi.GPIO pins for Raspberry Pi 1-3B+
-from adafruit_blinka.microcontroller.generic_linux.rpi_gpio_pin import Pin
-
-D0 = Pin(0)
-D1 = Pin(1)
-
-D2 = Pin(2)
-SDA = Pin(2)
-D3 = Pin(3)
-SCL = Pin(3)
-
-D4 = Pin(4)
-D5 = Pin(5)
-D6 = Pin(6)
-
-D7 = Pin(7)
-CE1 = Pin(7)
-D8 = Pin(8)
-CE0 = Pin(8)
-D9 = Pin(9)
-MISO = Pin(9)
-D10 = Pin(10)
-MOSI = Pin(10)
-D11 = Pin(11)
-SCLK = Pin(11)  # Raspberry Pi naming
-SCK = Pin(11)  # CircuitPython naming
-
-D12 = Pin(12)
-D13 = Pin(13)
-
-D14 = Pin(14)
-TXD = Pin(14)
-D15 = Pin(15)
-RXD = Pin(15)
-
-D16 = Pin(16)
-D17 = Pin(17)
-D18 = Pin(18)
-D19 = Pin(19)
-MISO_1 = Pin(19)
-D20 = Pin(20)
-MOSI_1 = Pin(20)
-D21 = Pin(21)
-SCLK_1 = Pin(21)
-SCK_1 = Pin(21)
-D22 = Pin(22)
-D23 = Pin(23)
-D24 = Pin(24)
-D25 = Pin(25)
-D26 = Pin(26)
-D27 = Pin(27)
-D28 = Pin(28)
-D29 = Pin(29)
-D30 = Pin(30)
-D31 = Pin(31)
-D32 = Pin(32)
-D33 = Pin(33)
-D34 = Pin(34)
-D35 = Pin(35)
-D36 = Pin(36)
-D37 = Pin(37)
-D38 = Pin(38)
-D39 = Pin(39)
-D40 = Pin(40)
-MISO_2 = Pin(40)
-D41 = Pin(41)
-MOSI_2 = Pin(41)
-D42 = Pin(42)
-SCLK_2 = Pin(42)
-SCK_2 = Pin(43)
-D43 = Pin(43)
-D44 = Pin(44)
-D45 = Pin(45)
-
-# ordered as spiId, sckId, mosiId, misoId
-spiPorts = (
-    (0, SCLK, MOSI, MISO),
-    (1, SCLK_1, MOSI_1, MISO_1),
-    (2, SCLK_2, MOSI_2, MISO_2),
-)
-
-# ordered as uartId, txId, rxId
-uartPorts = ((1, TXD, RXD),)
-
-# These are the known hardware I2C ports / pins.
-# For software I2C ports created with the i2c-gpio overlay, see:
-#     https://github.com/adafruit/Adafruit_Python_Extended_Bus
-i2cPorts = (
-    (1, SCL, SDA),
-    (0, D1, D0),  # both pi 1 and pi 2 i2c ports!
-)
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/PulseIn.py b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/PulseIn.py
deleted file mode 100644
index 78d5761a..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/PulseIn.py
+++ /dev/null
@@ -1,187 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
-"""Custom PulseIn Class to read PWM signals"""
-import time
-import subprocess
-import os
-import atexit
-import random
-import struct
-import sysv_ipc
-
-DEBUG = False
-queues = []
-procs = []
-
-
-# The message queues live outside of python space, and must be formally cleaned!
-def final():
-    """In case the program is cancelled or quit, we need to clean up the PulseIn
-    helper process and also the message queue, this is called at exit to do so"""
-    if DEBUG:
-        print("Cleaning up message queues", queues)
-        print("Cleaning up processes", procs)
-    for q in queues:
-        q.remove()
-    for proc in procs:
-        proc.terminate()
-
-
-atexit.register(final)
-
-
-# pylint: disable=c-extension-no-member
-class PulseIn:
-    """PulseIn Class to read PWM signals"""
-
-    def __init__(self, pin, maxlen=2, idle_state=False):
-        """Create a PulseIn object associated with the given pin.
-        The object acts as a read-only sequence of pulse lengths with
-        a given max length. When it is active, new pulse lengths are
-        added to the end of the list. When there is no more room
-        (len() == maxlen) the oldest pulse length is removed to make room."""
-        self._pin = pin
-        self._maxlen = maxlen
-        self._idle_state = idle_state
-        self._queue_key = random.randint(1, 9999)
-        try:
-            self._mq = sysv_ipc.MessageQueue(None, flags=sysv_ipc.IPC_CREX)
-            if DEBUG:
-                print("Message Queue Key: ", self._mq.key)
-            queues.append(self._mq)
-        except sysv_ipc.ExistentialError:
-            raise RuntimeError(
-                "Message queue creation failed"
-            ) from sysv_ipc.ExistentialError
-
-        # Check if OS is 64-bit
-        if struct.calcsize("P") * 8 == 64:  # pylint: disable=no-member
-            libgpiod_filename = "libgpiod_pulsein64"
-        else:
-            libgpiod_filename = "libgpiod_pulsein"
-
-        dir_path = os.path.dirname(os.path.realpath(__file__))
-        cmd = [
-            dir_path + "/" + libgpiod_filename,
-            "--pulses",
-            str(maxlen),
-            "--queue",
-            str(self._mq.key),
-        ]
-        if idle_state:
-            cmd.append("-i")
-        if isinstance(pin.id, tuple):
-            cmd.append(f"gpiochip{pin.id[0]}")
-            cmd.append(str(pin.id[1]))
-        else:
-            cmd.append("gpiochip0")
-            cmd.append(str(pin))
-        if DEBUG:
-            print(cmd)
-
-        self._process = subprocess.Popen(cmd)  # pylint: disable=consider-using-with
-        procs.append(self._process)
-
-        # wait for it to start up
-        if DEBUG:
-            print("Waiting for startup success message from subprocess")
-        message = self._wait_receive_msg(timeout=0.25)
-        if message[0] != b"!":
-            raise RuntimeError("Could not establish message queue with subprocess")
-        self._paused = False
-
-    # pylint: disable=redefined-builtin
-    def _wait_receive_msg(self, timeout=0, type=2):
-        """Internal helper that will wait for new messages of a given type,
-        and throw an exception on timeout"""
-        if timeout > 0:
-            stamp = time.monotonic()
-            while (time.monotonic() - stamp) < timeout:
-                try:
-                    message = self._mq.receive(block=False, type=type)
-                    return message
-                except sysv_ipc.BusyError:
-                    time.sleep(0.001)  # wait a bit then retry!
-            # uh-oh timed out
-            raise RuntimeError(
-                "Timed out waiting for PulseIn message. Make sure libgpiod is installed."
-            )
-        message = self._mq.receive(block=True, type=type)
-        return message
-
-    # pylint: enable=redefined-builtin
-
-    def deinit(self):
-        """Deinitialises the PulseIn and releases any hardware and software
-        resources for reuse."""
-        # Clean up after ourselves
-        self._process.terminate()
-        procs.remove(self._process)
-        self._mq.remove()
-        queues.remove(self._mq)
-
-    def __enter__(self):
-        """No-op used by Context Managers."""
-        return self
-
-    def __exit__(self, exc_type, exc_value, tb):
-        """Automatically deinitializes the hardware when exiting a context."""
-        self.deinit()
-
-    def resume(self, trigger_duration=0):
-        """Resumes pulse capture after an optional trigger pulse."""
-        if trigger_duration != 0:
-            self._mq.send("t%d" % trigger_duration, True, type=1)
-        else:
-            self._mq.send("r", True, type=1)
-        self._paused = False
-
-    def pause(self):
-        """Pause pulse capture"""
-        self._mq.send("p", True, type=1)
-        self._paused = True
-
-    @property
-    def paused(self):
-        """True when pulse capture is paused as a result of pause() or
-        an error during capture such as a signal that is too fast."""
-        return self._paused
-
-    @property
-    def maxlen(self):
-        """The maximum length of the PulseIn. When len() is equal to maxlen,
-        it is unclear which pulses are active and which are idle."""
-        return self._maxlen
-
-    def clear(self):
-        """Clears all captured pulses"""
-        self._mq.send("c", True, type=1)
-
-    def popleft(self):
-        """Removes and returns the oldest read pulse."""
-        self._mq.send("^", True, type=1)
-        message = self._wait_receive_msg()
-        reply = int(message[0].decode("utf-8"))
-        # print(reply)
-        if reply == -1:
-            raise IndexError("pop from empty list")
-        return reply
-
-    def __len__(self):
-        """Returns the current pulse length"""
-        self._mq.send("l", True, type=1)
-        message = self._wait_receive_msg()
-        return int(message[0].decode("utf-8"))
-
-    # pylint: disable=redefined-builtin
-    def __getitem__(self, index, type=None):
-        """Returns the value at the given index or values in slice."""
-        self._mq.send("i%d" % index, True, type=1)
-        message = self._wait_receive_msg()
-        ret = int(message[0].decode("utf-8"))
-        if ret == -1:
-            raise IndexError("list index out of range")
-        return ret
-
-    # pylint: enable=redefined-builtin
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/__init__.py b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/__init__.py
deleted file mode 100644
index e69de29b..00000000
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein
deleted file mode 100755
index e1783f8e47196dd044e4abf2ad42de742342bc29..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 20448
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
WiB3@Z_;+nxZuK|d%Zdq}O8#&8n;X*r

diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein.license b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein.license
deleted file mode 100644
index cc693300..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein.license
+++ /dev/null
@@ -1,3 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64 b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64
deleted file mode 100755
index 1bad045af84826f0dda15bc3584a1a7b45ce6a13..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 25832
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
XRjz_ay{fyyD81`GLFJhQOeFh%vFNJ!

diff --git a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64.license b/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64.license
deleted file mode 100644
index cc693300..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/pulseio/libgpiod_pulsein64.license
+++ /dev/null
@@ -1,3 +0,0 @@
-# SPDX-FileCopyrightText: 2021 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
diff --git a/src/adafruit_blinka/microcontroller/bcm283x/rotaryio.py b/src/adafruit_blinka/microcontroller/bcm283x/rotaryio.py
deleted file mode 100644
index d7017ff8..00000000
--- a/src/adafruit_blinka/microcontroller/bcm283x/rotaryio.py
+++ /dev/null
@@ -1,192 +0,0 @@
-# SPDX-FileCopyrightText: 2025 Melissa LeBlanc-Williams for Adafruit Industries
-#
-# SPDX-License-Identifier: MIT
-# SPDX-License-Identifier: BSD-3-Clause
-"""
-`rotaryio` - Support for reading rotation sensors
-===========================================================
-See `CircuitPython:rotaryio` in CircuitPython for more details.
-
-Raspberry Pi PIO implementation
-
-* Author(s): Melissa LeBlanc-Williams
-"""
-
-from __future__ import annotations
-import array
-import microcontroller
-
-try:
-    import adafruit_pioasm
-    from adafruit_rp1pio import StateMachine
-except ImportError as exc:
-    raise ImportError(
-        "adafruit_pioasm and adafruit_rp1pio are required for this module"
-    ) from exc
-
-_n_read = 17
-_program = adafruit_pioasm.Program(
-    """
-;
-; Copyright (c) 2023 Raspberry Pi (Trading) Ltd.
-;
-; SPDX-License-Identifier: BSD-3-Clause
-;
-.pio_version 0 // only requires PIO version 0
-
-.program quadrature_encoder
-
-; the code must be loaded at address 0, because it uses computed jumps
-.origin 0
-
-
-; the code works by running a loop that continuously shifts the 2 phase pins into
-; ISR and looks at the lower 4 bits to do a computed jump to an instruction that
-; does the proper "do nothing" | "increment" | "decrement" action for that pin
-; state change (or no change)
-
-; ISR holds the last state of the 2 pins during most of the code. The Y register
-; keeps the current encoder count and is incremented / decremented according to
-; the steps sampled
-
-; the program keeps trying to write the current count to the RX FIFO without
-; blocking. To read the current count, the user code must drain the FIFO first
-; and wait for a fresh sample (takes ~4 SM cycles on average). The worst case
-; sampling loop takes 10 cycles, so this program is able to read step rates up
-; to sysclk / 10  (e.g., sysclk 125MHz, max step rate = 12.5 Msteps/sec)
-
-; 00 state
-    jmp update    ; read 00
-    jmp decrement ; read 01
-    jmp increment ; read 10
-    jmp update    ; read 11
-
-; 01 state
-    jmp increment ; read 00
-    jmp update    ; read 01
-    jmp update    ; read 10
-    jmp decrement ; read 11
-
-; 10 state
-    jmp decrement ; read 00
-    jmp update    ; read 01
-    jmp update    ; read 10
-    jmp increment ; read 11
-
-; to reduce code size, the last 2 states are implemented in place and become the
-; target for the other jumps
-
-; 11 state
-    jmp update    ; read 00
-    jmp increment ; read 01
-decrement:
-    ; note: the target of this instruction must be the next address, so that
-    ; the effect of the instruction does not depend on the value of Y. The
-    ; same is true for the "jmp y--" below. Basically "jmp y--, <next addr>"
-    ; is just a pure "decrement y" instruction, with no other side effects
-    jmp y--, update ; read 10
-
-    ; this is where the main loop starts
-.wrap_target
-update:
-    mov isr, y      ; read 11
-    push noblock
-
-sample_pins:
-    ; we shift into ISR the last state of the 2 input pins (now in OSR) and
-    ; the new state of the 2 pins, thus producing the 4 bit target for the
-    ; computed jump into the correct action for this state. Both the PUSH
-    ; above and the OUT below zero out the other bits in ISR
-    out isr, 2
-    in pins, 2
-
-    ; save the state in the OSR, so that we can use ISR for other purposes
-    mov osr, isr
-    ; jump to the correct state machine action
-    mov pc, isr
-
-    ; the PIO does not have a increment instruction, so to do that we do a
-    ; negate, decrement, negate sequence
-increment:
-    mov y, ~y
-    jmp y--, increment_cont
-increment_cont:
-    mov y, ~y
-.wrap    ; the .wrap here avoids one jump instruction and saves a cycle too
-"""
-)
-
-_zero_y = adafruit_pioasm.assemble("set y 0")
-
-
-class IncrementalEncoder:
-    """
-    IncrementalEncoder determines the relative rotational position based on two series of
-    pulses. It assumes that the encoder’s common pin(s) are connected to ground,and enables
-    pull-ups on pin_a and pin_b.
-
-    Create an IncrementalEncoder object associated with the given pins. It tracks the
-    positional state of an incremental rotary encoder (also known as a quadrature encoder.)
-    Position is relative to the position when the object is constructed.
-    """
-
-    def __init__(
-        self, pin_a: microcontroller.Pin, pin_b: microcontroller.Pin, divisor: int = 4
-    ):
-        """Create an incremental encoder on pin_a and the next higher pin
-
-        Always operates in "x4" mode (one count per quadrature edge)
-
-        Assumes but does not check that pin_b is one above pin_a."""
-        if pin_b is not None and pin_b.id != pin_a.id + 1:
-            raise ValueError("pin_b must be None or one higher than pin_a")
-
-        try:
-            self._sm = StateMachine(
-                _program.assembled,
-                frequency=0,
-                init=_zero_y,
-                first_in_pin=pin_a,
-                in_pin_count=2,
-                pull_in_pin_up=0x3,
-                auto_push=True,
-                push_threshold=32,
-                in_shift_right=False,
-                **_program.pio_kwargs,
-            )
-        except RuntimeError as e:
-            if "(error -13)" in e.args[0]:
-                raise RuntimeError(
-                    "This feature requires a rules file to allow access to PIO. See "
-                    "https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/"
-                    "using-neopixels-on-the-pi-5#updating-permissions-3189429"
-                ) from e
-            raise
-        self._buffer = array.array("i", [0] * _n_read)
-        self.divisor = divisor
-        self._position = 0
-
-    def deinit(self):
-        """Deinitializes the IncrementalEncoder and releases any hardware resources for reuse."""
-        self._sm.deinit()
-
-    def __enter__(self) -> IncrementalEncoder:
-        """No-op used by Context Managers."""
-        return self
-
-    def __exit__(self, _type, _value, _traceback):
-        """
-        Automatically deinitializes when exiting a context. See
-        :ref:`lifetime-and-contextmanagers` for more info.
-        """
-        self.deinit()
-
-    @property
-    def position(self):
-        """The current position in terms of pulses. The number of pulses per rotation is defined
-        by the specific hardware and by the divisor."""
-        self._sm.readinto(self._buffer)  # read N stale values + 1 fresh value
-        raw_position = self._buffer[-1]
-        delta = int((raw_position - self._position * self.divisor) / self.divisor)
-        self._position += delta
-        return self._position
